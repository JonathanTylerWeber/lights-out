{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan/Documents/code/springboard/react/lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(() => {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        const isLit = Math.random() < chanceLightStartsOn;\n        row.push(isLit);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  });\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const newBoard = oldBoard.map(row => [...row]);\n      const flipCell = (y, x) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          newBoard[y][x] = !newBoard[y][x];\n        }\n      };\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      return newBoard;\n    });\n  }\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: cell,\n          flipCellsAround: () => flipCellsAround(`${y}-${x}`)\n        }, `${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this))\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"jxdCxl/p3GkGPI2y781wdqj0nR4=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","initialBoard","y","row","x","isLit","Math","random","push","hasWon","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","newBoard","flipCell","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/jonathan/Documents/code/springboard/react/lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(() => {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        const isLit = Math.random() < chanceLightStartsOn;\n        row.push(isLit);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  });\n\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const newBoard = oldBoard.map(row => [...row]);\n\n      const flipCell = (y, x) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          newBoard[y][x] = !newBoard[y][x];\n        }\n      };\n\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n\n      return newBoard;\n    });\n  }\n\n  if (hasWon()) {\n    return <div>You won!</div>;\n  }\n\n  return (\n    <table className=\"Board\">\n      <tbody>\n        {board.map((row, y) => (\n          <tr key={y}>\n            {row.map((cell, x) => (\n              <Cell\n                key={`${y}-${x}`}\n                isLit={cell}\n                flipCellsAround={() => flipCellsAround(`${y}-${x}`)}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}